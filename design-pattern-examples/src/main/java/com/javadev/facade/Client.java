package com.javadev.facade;

/**
 * 结构型模式：外观模式
 * 外观模式：为一组接口提供统一的界面，这个界面就是这组接口的高级接口，这个高级接口使得子系统更加易用。
 * @author ll-t150
 * 优点：
 * 	使得子系统之间的依赖达到最小。
 * 
 * 通常在软件设计中，尤其是OO，对实现细节的过多暴露不利于后期的扩展，只有暴露的细节越少，进行功能的扩展才会更容易。
 * 
 * 例子：
 * 	外观相当于一个门面，是与外界进行沟通交流的，相当于公司的业务员，业务员每天都要与很多客户打交道；
 * 	而具体的子系统则相当于开发功能模块的开发人员，不需要与具体的客户沟通推销产品，只负责功能的实现以及产品的交付，是对内的。
 *  使用外观模式的好处就是外界只需要有一个Facade就行了，这个Facade能够与外界进行各种交付，当需要某个子系统的功能时，Facade从内部进行调用就行。 
 * 	
 * 	外界（每个具体的客户）需要了解子系统的具体功能模块，而一旦子系统发生更改，则与外界的交付将无法进行下去，
 * 	这样显然系统与外界的耦合程度很高，每次交付都要依赖具体的子系统。而现在使用Facade之后，客户类只需要与一个Facade进行交付就可以了
 * 
 *  外观模式和代理模式区别
 *    1、代理对象主要代表一个对象，而外观模式的Facade则代表一个子系统
 *	  2、代理对象无法直接直接目标对象，只是提供访问对象的访问控制（不让目标对象与外界进行交付，而是由代理对象完成与外界的交互）；
 *		 而外观对象可以直接访问目标对象，但是对目标对象的访问是以更高级的接口完成调用的。
 * 
 */
public class Client {
	
	public static void main(String[] args) {
		Facade facade = new Facade();
		facade.methodA();
		System.out.println("=========");
		facade.methodB();
	}
}
